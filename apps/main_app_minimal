#!/usr/bin/env python3
'''main_app_minimal : minimal glue app example for controlling a synth'''

__copyright__   = 'Copyright (C) 2020 Modern Ancient Instruments Networked AB, dba Elk'

import sys
import os
import time
import liblo
from collections import defaultdict

from elkpy import sushicontroller as sc
from elkpy import sushiprocessor as sp

###############
#  Constants  #
###############

SUSHI_ADDRESS = ('localhost:51051')

SENSEI_TO_BRIDGE_OSC_PORT = 23023
BRIDGE_TO_SENSEI_PORT = 23024

SENSEI_ADDRESS = ('localhost', BRIDGE_TO_SENSEI_PORT)

# Sensor input path : (parameter, display_block_id)
SENSEI_KNOBS_TO_PARAMETER = {
    '/sensors/analog/pot_A' :     ( 'elk_juce_example', 'Cutoff', 0),
    '/sensors/analog/pot_B' :     ( 'elk_juce_example', 'Resonance', 1),
    '/sensors/analog/pot_C' :     ( 'elk_juce_example', 'Room Size', 2)
}

# Sensor input path : MIDI note number
SENSEI_BUTTONS_TO_NOTE = {
    '/sensors/digital/button_0' : 48,
    '/sensors/digital/button_1' : 60,
    '/sensors/digital/button_2' : 62,
    '/sensors/digital/button_3' : 64,
    '/sensors/digital/button_4' : 65,
    '/sensors/digital/button_5' : 67,
    '/sensors/digital/button_6' : 69,
    '/sensors/digital/button_7' : 71,
    '/sensors/digital/button_8' : 72
}

SUSHI_PROCESSORS = ['main', 'elk_juce_example']

SUSHI_STARTUP_MESSAGES = [
    ('main', 'gain', -10)
]

ANALOG_SENSORS_MIN_ABS_DIFF = (1.0 / 127)
REFRESH_INTERVAL_MS = 50

# Get protofile to generate grpc library
proto_file = os.environ.get('SUSHI_GRPC_ELKPY_PROTO')
if proto_file is None:
    print("Environment variable SUSHI_GRPC_ELKPY_PROTO not defined, set it to point the .proto definition")
    sys.exit(-1)

#########################
#  Module functions
#########################

def set_led_output(sensor_idx, enabled):
    osc_msg = liblo.Message('/set_output')
    osc_msg.add(('i', sensor_idx))
    osc_msg.add(('i', int(enabled)))
    liblo.send(SENSEI_ADDRESS, osc_msg)

################
#  Classes     #
################

class ElkBridge(object):
    """ 
    Bridge/Glue object that manages duplex communication between Sushi and the controlling interface (which
    could be a hw controller, Open stage control, TouchOSC or similar) And encapsulates simple logic
    around programs, state leds and similiar.
    """

    def __init__(self):
        self._server = liblo.ServerThread(SENSEI_TO_BRIDGE_OSC_PORT)
        self._sushi = sc.SushiController(SUSHI_ADDRESS, proto_file)
        self._processors = self._create_processors(SUSHI_PROCESSORS)
        self._values = defaultdict(float)
        self._analog_values = defaultdict(float)

        self.register_callbacks()
        self._send_initial_sushi_configuration()


    def _create_processors(self, list_of_processors):
        processors = {}
        for processor in list_of_processors:
            processors[processor] = sp.SushiProcessor(processor,self._sushi)
        return processors


    def register_callbacks(self):
        for path, unused in SENSEI_KNOBS_TO_PARAMETER.items():
            self._server.add_method(path, 'f', self._handle_knobs)

        for path, v in (SENSEI_BUTTONS_TO_NOTE).items():
            self._server.add_method(path, 'f', self._handle_buttons)

        self._server.add_method(None, None, self._unhandled_msg_callback)


    def _unhandled_msg_callback(self, path, args, types, src):
        print('Unknown message %s from %s' % (path, src.url))


    def start(self):
        self._server.start()


    def _send_initial_sushi_configuration(self):
        for data in SUSHI_STARTUP_MESSAGES:
            self._processors[data[0]].set_parameter_value(data[1], data[2])


    def _handle_knobs(self, path, args):
        """
        Knobs callback
        """
        value = args[0]
        data = SENSEI_KNOBS_TO_PARAMETER[path]
        parameter = data[1]
        # Due to noise in pots, add some hysteresis
        if (abs(self._analog_values[parameter] - value) > ANALOG_SENSORS_MIN_ABS_DIFF):
            self._analog_values[parameter] = value
            self._handle_value_change(data, value)


    def _handle_buttons(self, path, args):
        """
        Callback for buttons. Enable/disable LEDs and send NoteOn / NoteOff messages
        """
        # LED idxs are shifted from button idxs
        target_led = int(path.split('/')[-1].split('_')[-1]) + 1
        note_idx = SENSEI_BUTTONS_TO_NOTE[path]

        value = int(args[0])
        set_led_output(target_led, value)
        self._sushi.send_note_on(0, 0, note_idx, value)

    def _handle_value_change(self, data, value):
        """
        Helper to sync parameter changes between SUSHI and other clients
        """
        processor = data[0]
        parameter = data[1]
        display_block = data[2]
        if parameter != 'unused':
            self._processors[processor].set_parameter_value(parameter, value)
            self._values[parameter] = value

if __name__ == '__main__':
    rack_bridge = ElkBridge()
    rack_bridge.start()

    while True:
        time.sleep(REFRESH_INTERVAL_MS * 1.0e-3)

